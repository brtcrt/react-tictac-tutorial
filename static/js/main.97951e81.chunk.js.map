{"version":3,"sources":["index.js"],"names":["Square","props","state","value","className","onClick","this","React","Component","Board","squares","Array","fill","xIsNext","i","slice","calculateWinner","setState","won","draw","checkDraw","bestMove","bestScore","Infinity","length","score","minimax","AutoPlay","handleClick","status","winner","renderSquare","Game","depth","isMaximizing","result","X","O","Math","max","min","filled","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97951e81.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: null,\r\n    };\r\n  }\r\n    render() {\r\n      return (\r\n        <button className=\"square\" \r\n        onClick={()=> {this.props.onClick()}}\r\n        >\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        squares: Array(9).fill(null),\r\n        xIsNext: true,\r\n      };\r\n    }\r\n    handleClick(i) {\r\n      const squares = this.state.squares.slice();\r\n      let won = calculateWinner(squares);\r\n      if (won) return;\r\n      if(squares[i] === \"O\" || squares[i] === \"X\") return;\r\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      this.setState({squares: squares, xIsNext: false});\r\n      AutoPlay(squares);\r\n      this.setState({xIsNext: true});\r\n    }\r\n    renderSquare(i) {\r\n      return <Square value={this.state.squares[i]} onClick={()=> {this.handleClick(i)}}/>;\r\n    }\r\n  \r\n    render() {\r\n      const winner = calculateWinner(this.state.squares);\r\n      const draw = checkDraw(this.state.squares);\r\n      let status;\r\n      if (winner) {\r\n        status = 'Winner: ' + winner + \" Refresh the page to play again.\";\r\n      } else if (draw) {\r\n        status = \"It's a draw. Refresh the page to play again.\"\r\n      } else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n        \r\n\r\n  \r\n      return (\r\n        <div>\r\n          <div className=\"status\">{status}</div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n\r\nfunction AutoPlay(squares) {\r\n  let won = calculateWinner(squares);\r\n  let draw = checkDraw(squares);\r\n  if (won) {\r\n    return;\r\n  } else if (draw) {\r\n    return;\r\n  }\r\n  \r\n  let bestScore = -Infinity;\r\n  let bestMove;\r\n  for (let i=0; i<squares.length; i++) {\r\n    if(squares[i] === null) {\r\n      squares[i] = \"O\";\r\n      let score = minimax(squares, 0, false);\r\n      squares[i] = null;\r\n      if (score > bestScore) {\r\n        bestScore = score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n  squares[bestMove] = \"O\";\r\n\r\n  //let emptySquares = [];\r\n  //for(let i=0; i<squares.length; i++) {\r\n  //  if (squares[i] === null) {\r\n  //    emptySquares.push(i);\r\n  //  }\r\n  //}\r\n  //const randomSquare = Math.floor(Math.random()*emptySquares.length);\r\n  //squares[emptySquares[randomSquare]] = \"O\";\r\n  \r\n}\r\n\r\n\r\n\r\nfunction minimax (squares, depth, isMaximizing) {\r\n  let scores = {\r\n    X: -1,\r\n    O: 1,\r\n    draw: 0\r\n  };\r\n  let winner = calculateWinner(squares);\r\n  let result = null;\r\n  if (checkDraw(squares)) {\r\n    result = \"draw\";\r\n  }\r\n  if (winner) {\r\n    result = winner;\r\n  }\r\n  if(result !== null) {\r\n    return scores[result];\r\n  }\r\n  if(isMaximizing) {\r\n    let bestScore = -Infinity;\r\n    for (let i=0; i<squares.length; i++) {\r\n      if(squares[i] == null) {\r\n        squares[i] = \"O\";\r\n        let score = minimax(squares, depth+1, false);\r\n        squares[i] = null;\r\n        bestScore = Math.max(score, bestScore);\r\n      }\r\n    }\r\n    return bestScore;\r\n  } else {\r\n    let bestScore = Infinity;\r\n    for (let i=0; i<squares.length; i++) {\r\n      if(squares[i] == null) {\r\n        squares[i] = \"X\";\r\n        let score = minimax(squares, depth+1, true);\r\n        squares[i] = null;\r\n        bestScore = Math.min(score, bestScore);\r\n      }\r\n    }\r\n    return bestScore;\r\n  }\r\n}\r\n\r\nfunction checkDraw (squares) {\r\n  let filled = 0;\r\n  for (let i=0; i<squares.length; i++) {\r\n    if(squares[i] !== null) {\r\n      filled++;\r\n    }\r\n  }\r\n  if (filled === 9)  {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}"],"sourceRoot":""}